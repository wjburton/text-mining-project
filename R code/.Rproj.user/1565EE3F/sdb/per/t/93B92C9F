{
    "collab_server" : "",
    "contents" : "#association analysis \n\n#we are using the association analysis package 'arules'\nlibrary(arules)\nlibrary(dplyr)\n\n\n#Start by reading in the food lists, then read in a csv containing recipes.\n# we clean the recipes by only keeping words that exist in the food list:\n\n#read in food csv files (contains a list of foods that we'd like to keep for\n# the analysis \nfood_list1 <- read.csv('../data/food_list.csv', stringsAsFactors = F)\nfood_list2 <- read.csv('../data/michael_term_list.csv', stringsAsFactors = F)\n\n#only keep single words .. The method i'm using only looks for single word matches\nfood_list2 <- food_list2[-grep(' ', food_list2)]\nfood_list <- c(food_list1, food_list2)\nfood_list <- unlist(unique(food_list))\nfood_list <- tm::stemDocument(food_list)\n\n\n#read in a file that has each ingredient in a recipe as a different column.\n# This will be used as a transactional dataset, but first it needs to be cleaned\n# to convert things like '12 chicken breasts' to 'chicken'\nassoc <- read.csv('../data/assoc.csv', stringsAsFactors = F)\n\n\n#select the ingredient columns\ningreds <- apply(assoc[,11:length(assoc)], 2, clean_text )\n\n#Clean the single ingredients, stem them \n# We are looping over each column and then over each ingredient vector in this section\ningreds <- apply(ingreds, 2, function(text){\n  x <- strsplit(text, split = \" \")\n  x <- lapply(x, function(y) tm::stemDocument(y))\n  new_text <- sapply(x, function(x) unique(x[x %in% food_list])[1])\n  return(new_text)\n})\n\n#write the cleaned ingredients to a csv\nwrite.csv(ingreds,'ingred_transactions.csv', row.names= F)\n\n\n\n\n#read in ingred_transactions\ningredients <- read.transactions(\"ingred_transactions.csv\", sep = \",\")\n\n#calculate lift support and confidence on the transactional dataset\nrules <- apriori(ingredients, parameter = list(support = 0.006, confidence = 0.25, minlen = 2))\n\n#inspect rules extracts the association rules\nassociations <- inspect(rules)\n\n#this just adds a name to the one of the columns that didn't have a name\nnames(associations)[2] <- 'arrow'\n\n#arrange the associations by lift\nassociations %>% \n  arrange(desc(lift)) -> final\n\nhead(final,20)\n",
    "created" : 1476923924310.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3142085906",
    "id" : "93B92C9F",
    "lastKnownWriteTime" : 1477011666,
    "last_content_update" : 1477011666339,
    "path" : "~/MSA/fall/text_mining/text_mining_proj/R code/association_analysis.R",
    "project_path" : "association_analysis.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}